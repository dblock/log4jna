version: 2.0.{build}
os: Windows Server 2012
branches:
  only:
  - master
  - fix-yml-squashed

environment:
  MAVEN_HOME: C:\maven\apache-maven-3.3.9
  PATH: C:\maven\apache-maven-3.3.9\bin;$(JAVA_HOME)\bin;$(PATH)
  MAVEN_OPTS: -Xmx4g
  JAVA_OPTS: -Xmx4g
  M2: $(USERPROFILE)\.m2
  SETTINGS: $(APPVEYOR_BUILD_FOLDER)\build\Maven\settings.xml
  SETTINGS_SEC: $(APPVEYOR_BUILD_FOLDER)\build\Maven\settings-security.xml
  M2_SETTINGS: $(USERPROFILE)\.m2\settings.xml
  M2_SETTINGS_SEC: $(USERPROFILE)\.m2\settings-security.xml
  GNUPG_HOME: $(USERPROFILE)\.gnupg
  PUB_KEY_FILE_ENC: $(APPVEYOR_BUILD_FOLDER)\build\Maven\pubring.gpg.asc.enc
  SEC_KEY_FILE_ENC: $(APPVEYOR_BUILD_FOLDER)\build\Maven\secring.gpg.asc.enc
  PUB_KEY_FILE_GPG: $(APPVEYOR_BUILD_FOLDER)\build\Maven\pubring.gpg.asc
  SEC_KEY_FILE_GPG: $(APPVEYOR_BUILD_FOLDER)\build\Maven\secring.gpg.asc
  SECURE_FILE_DIR: C:\secure-file

  secret:
    secure: Z851+sNOAoEP/lr/3hGjRjC+SlaO19wPqPAYGZFEgfY= 
    
  #secret:
  #  secure: 2jB/P5OINYqlYP3vH2SkPolt/GG6eP8WpL2XOXszfwY= 

install:
  
  # Install secure-file if not present
  - ps: |
     if (!(Test-Path -Path $env:SECURE_FILE_DIR )) {
        nuget install secure-file -ExcludeVersion -o C:\
     }

   # Install Maven if not present
  - ps: |
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      if (!(Test-Path -Path "C:\maven" )) {
        (new-object System.Net.WebClient).DownloadFile(
          'http://www.us.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip',
          'C:\maven-bin.zip'
        )
        [System.IO.Compression.ZipFile]::ExtractToDirectory("C:\maven-bin.zip", "C:\maven")
        
      }
      # Test if .m2 exists and create or update maven settings
      if(!(Test-Path -Path $env:M2)) {
          New-Item $env:M2 -type directory -Verbose
          # Install maven settings
          Copy-Item $env:SETTINGS $env:M2_SETTINGS -Verbose
          Copy-Item $env:SETTINGS_SEC $env:M2_SETTINGS_SEC -Verbose
      } else {
      # The directory exists test Meven settings
        if (!(Test-Path $env:M2_SETTINGS)) {
          Copy-Item $env:SETTINGS $env:M2_SETTINGS -Verbose
        } elseif ((Get-FileHash $env:M2_SETTINGS).hash -ne (Get-FileHash $env:SETTINGS).hash) {
          # Test if maven settings are up todate
          Copy-Item $env:SETTINGS $env:M2_SETTINGS -Force -Verbose
        } else {
          Write-Host "$env:M2_SETTINGS up to date"
        }
  
        if (!(Test-Path $env:M2_SETTINGS_SEC)) {
          Copy-Item $env:SETTINGS_SEC $M2_SETTINGS_SEC -Verbose
        } elseif((Get-FileHash $env:M2_SETTINGS_SEC).hash -ne (Get-FileHash $env:SETTINGS_SEC).hash) {
          Copy-Item $env:SETTINGS_SEC $env:M2_SETTINGS_SEC -Force -Verbose
        } else {
          Write-Host "$env:M2_SETTINGS_SEC up to date"
        }
  
      }

  # Decript and install gpg keys
  - C:\secure-file\tools\secure-file -decrypt %PUB_KEY_FILE_ENC% -secret %secret%
  - C:\secure-file\tools\secure-file -decrypt %SEC_KEY_FILE_ENC% -secret %secret%
  - gpg --import %PUB_KEY_FILE_GPG%
  - gpg --import %SEC_KEY_FILE_GPG%
   
# Ignore changes that not affect the build      
skip_commits:
  files:
    - '**/*.md'  
    - '**/*.txt'  
    - '**/.gitignore'  
    - '**/.project'  
    - '**/.classpath'
    - 'appveyor-mvn-conversion.yml'  

# For build and test we need to pass -Djna.nosys=true  to avoid exception:
# java.lang.UnsatisfiedLinkError: Can't obtain updateLastError method for class com.sun.jna.Native
build_script:
  - mvn clean install -B -Djna.nosys=true

test_script:
# Maven run the tests as part of the build we do not need to run them again

cache:
  # Cache all installed software and gpg and maven directories
  - '%SECURE_FILE_DIR%'
  - '%MAVEN_HOME%'
  # Rebuild .m2 if the maven setting changed (It prbably is more efficient to test the files hashes)
  - '%M2%'
